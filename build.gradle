plugins {
    id 'com.google.protobuf' version '0.8.18'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id "application"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.github.ben-manes.versions" version "0.39.0"
}

group 'elkx'
version '0.0.1'

application {
    mainClass = 'elkx.Main'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
        "org.jetbrains.kotlin:kotlin-stdlib",
        "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0",
    )

    implementation(
        'org.eclipse.elk:org.eclipse.elk.graph.json:0.7.1',
        'org.eclipse.elk:org.eclipse.elk.alg.layered:0.7.1',
    )

    implementation(
        'io.grpc:grpc-protobuf:1.43.1',
        'io.grpc:grpc-kotlin-stub:1.2.0',
        'io.grpc:grpc-stub:1.43.1',
        "com.google.protobuf:protobuf-kotlin:3.19.1",
    )
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
    runtimeOnly 'io.grpc:grpc-netty-shaded:1.43.1'

    testImplementation(
        'org.junit.jupiter:junit-jupiter-api:5.8.2',
        'org.jetbrains.kotlin:kotlin-test',
    )
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.19.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.43.1"
        }
        grpckt {
            artifact = 'io.grpc:protoc-gen-grpc-kotlin:1.2.0:jdk7@jar'
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                grpc {}
                grpckt {}
            }
            it.builtins {
                kotlin {}
            }
        }
    }
}

sourceSets {
    main {
        kotlin {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/grpckt'
            srcDirs 'build/generated/source/proto/main/kotlin'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

dependencyUpdates {
    checkConstraints = true

    rejectVersionIf {
        final version = it.candidate.version.toLowerCase()

        [
            "m", // milestone
            "alpha",
            "beta",
            "eap",
            "rc",
            "cr",
        ].any { version.contains(it) }
    }
}

test {
    useJUnitPlatform()
}

shadowJar {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileKotlin {
    kotlinOptions {
        if (System.env.CI) {
            allWarningsAsErrors = true
        }
    }
}
